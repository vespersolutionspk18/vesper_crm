{"version":3,"file":"Leads-02bc53da.js","sources":["../../../../frontend/src/components/ListViews/LeadsListView.vue","../../../../frontend/src/components/Modals/LeadModal.vue","../../../../frontend/src/pages/Leads.vue"],"sourcesContent":["<template>\n  <ListView\n    :class=\"$attrs.class\"\n    :columns=\"columns\"\n    :rows=\"rows\"\n    :options=\"{\n      getRowRoute: (row) => ({ name: 'Lead', params: { leadId: row.name } }),\n      selectable: options.selectable,\n      showTooltip: options.showTooltip,\n      resizeColumn: options.resizeColumn,\n    }\"\n    row-key=\"name\"\n  >\n    <ListHeader class=\"sm:mx-5 mx-3\" @columnWidthUpdated=\"emit('columnWidthUpdated')\">\n      <ListHeaderItem\n        v-for=\"column in columns\"\n        :key=\"column.key\"\n        :item=\"column\"\n        @columnWidthUpdated=\"emit('columnWidthUpdated', column)\"\n      >\n        <Button\n          v-if=\"column.key == '_liked_by'\"\n          variant=\"ghosted\"\n          class=\"!h-4\"\n          :class=\"isLikeFilterApplied ? 'fill-red-500' : 'fill-white'\"\n          @click=\"() => emit('applyLikeFilter')\"\n        >\n          <HeartIcon class=\"h-4 w-4\" />\n        </Button>\n      </ListHeaderItem>\n    </ListHeader>\n    <ListRows :rows=\"rows\" v-slot=\"{ idx, column, item }\">\n      <div v-if=\"column.key === '_assign'\" class=\"flex items-center\">\n        <MultipleAvatar\n          :avatars=\"item\"\n          size=\"sm\"\n          @click=\"\n            (event) =>\n              emit('applyFilter', {\n                event,\n                idx,\n                column,\n                item,\n                firstColumn: columns[0],\n              })\n          \"\n        />\n      </div>\n      <ListRowItem v-else :item=\"item\">\n        <template #prefix>\n          <div v-if=\"column.key === 'status'\">\n            <IndicatorIcon :class=\"item.color\" />\n          </div>\n          <div v-else-if=\"column.key === 'lead_name'\">\n            <Avatar\n              v-if=\"item.label\"\n              class=\"flex items-center\"\n              :image=\"item.image\"\n              :label=\"item.image_label\"\n              size=\"sm\"\n            />\n          </div>\n          <div v-else-if=\"column.key === 'organization'\">\n            <Avatar\n              v-if=\"item.label\"\n              class=\"flex items-center\"\n              :image=\"item.logo\"\n              :label=\"item.label\"\n              size=\"sm\"\n            />\n          </div>\n          <div v-else-if=\"column.key === 'lead_owner'\">\n            <Avatar\n              v-if=\"item.full_name\"\n              class=\"flex items-center\"\n              :image=\"item.user_image\"\n              :label=\"item.full_name\"\n              size=\"sm\"\n            />\n          </div>\n          <div v-else-if=\"column.key === 'mobile_no'\">\n            <PhoneIcon class=\"h-4 w-4\" />\n          </div>\n        </template>\n        <template #default=\"{ label }\">\n          <div\n            v-if=\"\n              [\n                'modified',\n                'creation',\n                'first_response_time',\n                'first_responded_on',\n                'response_by',\n              ].includes(column.key)\n            \"\n            class=\"truncate text-base\"\n            @click=\"\n              (event) =>\n                emit('applyFilter', {\n                  event,\n                  idx,\n                  column,\n                  item,\n                  firstColumn: columns[0],\n                })\n            \"\n          >\n            <Tooltip :text=\"item.label\">\n              <div>{{ item.timeAgo }}</div>\n            </Tooltip>\n          </div>\n          <div v-else-if=\"column.key === '_liked_by'\">\n            <Button\n              v-if=\"column.key == '_liked_by'\"\n              variant=\"ghosted\"\n              :class=\"isLiked(item) ? 'fill-red-500' : 'fill-white'\"\n              @click.stop.prevent=\"\n                () =>\n                  emit('likeDoc', {\n                    name: row.name,\n                    liked: isLiked(item),\n                  })\n              \"\n            >\n              <HeartIcon class=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div\n            v-else-if=\"column.key === 'sla_status'\"\n            class=\"truncate text-base\"\n          >\n            <Badge\n              v-if=\"item.value\"\n              :variant=\"'subtle'\"\n              :theme=\"item.color\"\n              size=\"md\"\n              :label=\"item.value\"\n              @click=\"\n                (event) =>\n                  emit('applyFilter', {\n                    event,\n                    idx,\n                    column,\n                    item,\n                    firstColumn: columns[0],\n                  })\n              \"\n            />\n          </div>\n          <div v-else-if=\"column.type === 'Check'\">\n            <FormControl\n              type=\"checkbox\"\n              :modelValue=\"item\"\n              :disabled=\"true\"\n              class=\"text-gray-900\"\n            />\n          </div>\n          <div\n            v-else\n            class=\"truncate text-base\"\n            @click=\"\n              (event) =>\n                emit('applyFilter', {\n                  event,\n                  idx,\n                  column,\n                  item,\n                  firstColumn: columns[0],\n                })\n            \"\n          >\n            {{ label }}\n          </div>\n        </template>\n      </ListRowItem>\n    </ListRows>\n    <ListSelectBanner>\n      <template #actions=\"{ selections, unselectAll }\">\n        <Dropdown\n          :options=\"listBulkActionsRef.bulkActions(selections, unselectAll)\"\n        >\n          <Button icon=\"more-horizontal\" variant=\"ghost\" />\n        </Dropdown>\n      </template>\n    </ListSelectBanner>\n  </ListView>\n  <ListFooter\n    v-if=\"pageLengthCount\"\n    class=\"border-t sm:px-5 px-3 py-2\"\n    v-model=\"pageLengthCount\"\n    :options=\"{\n      rowCount: options.rowCount,\n      totalCount: options.totalCount,\n    }\"\n    @loadMore=\"emit('loadMore')\"\n  />\n  <ListBulkActions ref=\"listBulkActionsRef\" v-model=\"list\" doctype=\"CRM Lead\" />\n</template>\n\n<script setup>\nimport HeartIcon from '@/components/Icons/HeartIcon.vue'\nimport IndicatorIcon from '@/components/Icons/IndicatorIcon.vue'\nimport PhoneIcon from '@/components/Icons/PhoneIcon.vue'\nimport MultipleAvatar from '@/components/MultipleAvatar.vue'\nimport ListBulkActions from '@/components/ListBulkActions.vue'\nimport ListRows from '@/components/ListViews/ListRows.vue'\nimport {\n  Avatar,\n  ListView,\n  ListHeader,\n  ListHeaderItem,\n  ListSelectBanner,\n  ListRowItem,\n  ListFooter,\n  Dropdown,\n  Tooltip,\n} from 'frappe-ui'\nimport { sessionStore } from '@/stores/session'\nimport { ref, computed, watch } from 'vue'\n\nconst props = defineProps({\n  rows: {\n    type: Array,\n    required: true,\n  },\n  columns: {\n    type: Array,\n    required: true,\n  },\n  options: {\n    type: Object,\n    default: () => ({\n      selectable: true,\n      showTooltip: true,\n      resizeColumn: false,\n      totalCount: 0,\n      rowCount: 0,\n    }),\n  },\n})\n\nconst emit = defineEmits([\n  'loadMore',\n  'updatePageCount',\n  'columnWidthUpdated',\n  'applyFilter',\n  'applyLikeFilter',\n  'likeDoc',\n])\n\nconst pageLengthCount = defineModel()\nconst list = defineModel('list')\n\nconst isLikeFilterApplied = computed(() => {\n  return list.value.params?.filters?._liked_by ? true : false\n})\n\nconst { user } = sessionStore()\n\nfunction isLiked(item) {\n  if (item) {\n    let likedByMe = JSON.parse(item)\n    return likedByMe.includes(user)\n  }\n}\n\nwatch(pageLengthCount, (val, old_value) => {\n  if (val === old_value) return\n  emit('updatePageCount', val)\n})\n\nconst listBulkActionsRef = ref(null)\n\ndefineExpose({\n  customListActions: computed(\n    () => listBulkActionsRef.value?.customListActions\n  ),\n})\n</script>\n","<template>\n  <Dialog v-model=\"show\" :options=\"{ size: '3xl' }\">\n    <template #body>\n      <div class=\"bg-white px-4 pb-6 pt-5 sm:px-6\">\n        <div class=\"mb-5 flex items-center justify-between\">\n          <div>\n            <h3 class=\"text-2xl font-semibold leading-6 text-gray-900\">\n              {{ __('Create Lead') }}\n            </h3>\n          </div>\n          <div class=\"flex items-center gap-1\">\n            <Button\n              v-if=\"isManager()\"\n              variant=\"ghost\"\n              class=\"w-7\"\n              @click=\"openQuickEntryModal\"\n            >\n              <EditIcon class=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" class=\"w-7\" @click=\"show = false\">\n              <FeatherIcon name=\"x\" class=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        <div>\n          <Fields v-if=\"sections.data\" :sections=\"sections.data\" :data=\"lead\" />\n          <ErrorMessage class=\"mt-4\" v-if=\"error\" :message=\"__(error)\" />\n        </div>\n      </div>\n      <div class=\"px-4 pb-7 pt-4 sm:px-6\">\n        <div class=\"flex flex-row-reverse gap-2\">\n          <Button\n            variant=\"solid\"\n            :label=\"__('Create')\"\n            :loading=\"isLeadCreating\"\n            @click=\"createNewLead\"\n          />\n        </div>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script setup>\nimport EditIcon from '@/components/Icons/EditIcon.vue'\nimport Fields from '@/components/Fields.vue'\nimport { usersStore } from '@/stores/users'\nimport { statusesStore } from '@/stores/statuses'\nimport { createResource } from 'frappe-ui'\nimport { computed, onMounted, ref, reactive, nextTick } from 'vue'\nimport { useRouter } from 'vue-router'\n\nconst props = defineProps({\n  defaults: Object,\n})\n\nconst { getUser, isManager } = usersStore()\nconst { getLeadStatus, statusOptions } = statusesStore()\n\nconst show = defineModel()\nconst router = useRouter()\nconst error = ref(null)\nconst isLeadCreating = ref(false)\n\nconst sections = createResource({\n  url: 'crm.fcrm.doctype.crm_fields_layout.crm_fields_layout.get_fields_layout',\n  cache: ['quickEntryFields', 'CRM Lead'],\n  params: { doctype: 'CRM Lead', type: 'Quick Entry' },\n  auto: true,\n  transform: (data) => {\n    return data.forEach((section) => {\n      section.fields.forEach((field) => {\n        if (field.name == 'status') {\n          field.type = 'Select'\n          field.options = leadStatuses.value\n          field.prefix = getLeadStatus(lead.status).iconColorClass\n        } else if (field.name == 'lead_owner') {\n          field.type = 'User'\n        }\n      })\n    })\n  },\n})\n\nconst lead = reactive({\n  salutation: '',\n  first_name: '',\n  last_name: '',\n  email: '',\n  mobile_no: '',\n  gender: '',\n  organization: '',\n  website: '',\n  no_of_employees: '',\n  territory: '',\n  annual_revenue: '',\n  industry: '',\n  status: '',\n  lead_owner: '',\n})\n\nconst createLead = createResource({\n  url: 'frappe.client.insert',\n  makeParams(values) {\n    return {\n      doc: {\n        doctype: 'CRM Lead',\n        ...values,\n      },\n    }\n  },\n})\n\nconst leadStatuses = computed(() => {\n  let statuses = statusOptions('lead')\n  if (!lead.status) {\n    lead.status = statuses[0].value\n  }\n  return statuses\n})\n\nfunction createNewLead() {\n  if (lead.website && !lead.website.startsWith('http')) {\n    lead.website = 'https://' + lead.website\n  }\n\n  createLead.submit(lead, {\n    validate() {\n      error.value = null\n      if (!lead.first_name) {\n        error.value = __('First Name is mandatory')\n        return error.value\n      }\n      if (lead.annual_revenue) {\n        lead.annual_revenue = lead.annual_revenue.replace(/,/g, '')\n        if (isNaN(lead.annual_revenue)) {\n          error.value = __('Annual Revenue should be a number')\n          return error.value\n        }\n      }\n      if (lead.mobile_no && isNaN(lead.mobile_no.replace(/[-+() ]/g, ''))) {\n        error.value = __('Mobile No should be a number')\n        return error.value\n      }\n      if (lead.email && !lead.email.includes('@')) {\n        error.value = __('Invalid Email')\n        return error.value\n      }\n      if (!lead.status) {\n        error.value = __('Status is required')\n        return error.value\n      }\n      isLeadCreating.value = true\n    },\n    onSuccess(data) {\n      isLeadCreating.value = false\n      show.value = false\n      router.push({ name: 'Lead', params: { leadId: data.name } })\n    },\n    onError(err) {\n      isLeadCreating.value = false\n      if (!err.messages) {\n        error.value = err.message\n        return\n      }\n      error.value = err.messages.join('\\n')\n    },\n  })\n}\n\nconst showQuickEntryModal = defineModel('quickEntry')\n\nfunction openQuickEntryModal() {\n  showQuickEntryModal.value = true\n  nextTick(() => {\n    show.value = false\n  })\n}\n\nonMounted(() => {\n  Object.assign(lead, props.defaults)\n  if (!lead.lead_owner) {\n    lead.lead_owner = getUser().name\n  }\n})\n</script>\n","<template>\n  <LayoutHeader>\n    <template #left-header>\n      <Breadcrumbs :items=\"breadcrumbs\" />\n    </template>\n    <template #right-header>\n      <CustomActions\n        v-if=\"leadsListView?.customListActions\"\n        :actions=\"leadsListView.customListActions\"\n      />\n      <Button\n        variant=\"solid\"\n        :label=\"__('Create')\"\n        @click=\"showLeadModal = true\"\n      >\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </template>\n  </LayoutHeader>\n  <ViewControls\n    ref=\"viewControls\"\n    v-model=\"leads\"\n    v-model:loadMore=\"loadMore\"\n    v-model:resizeColumn=\"triggerResize\"\n    v-model:updatedPageCount=\"updatedPageCount\"\n    doctype=\"CRM Lead\"\n    :filters=\"{ converted: 0 }\"\n    :options=\"{\n      allowedViews: ['list', 'group_by', 'kanban'],\n    }\"\n  />\n  <KanbanView\n    v-if=\"route.params.viewType == 'kanban'\"\n    v-model=\"leads\"\n    :options=\"{\n      getRoute: (row) => ({ name: 'Lead', params: { leadId: row.name } }),\n      onNewClick: (column) => onNewClick(column),\n    }\"\n    @update=\"(data) => viewControls.updateKanbanSettings(data)\"\n    @loadMore=\"(columnName) => viewControls.loadMoreKanban(columnName)\"\n  >\n    <template #title=\"{ titleField, itemName }\">\n      <div class=\"flex items-center gap-2\">\n        <div v-if=\"titleField === 'status'\">\n          <IndicatorIcon :class=\"getRow(itemName, titleField).color\" />\n        </div>\n        <div\n          v-else-if=\"\n            titleField === 'organization' && getRow(itemName, titleField).label\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, titleField).logo\"\n            :label=\"getRow(itemName, titleField).label\"\n            size=\"sm\"\n          />\n        </div>\n        <div\n          v-else-if=\"\n            titleField === 'lead_name' && getRow(itemName, titleField).label\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, titleField).image\"\n            :label=\"getRow(itemName, titleField).image_label\"\n            size=\"sm\"\n          />\n        </div>\n        <div\n          v-else-if=\"\n            titleField === 'lead_owner' &&\n            getRow(itemName, titleField).full_name\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, titleField).user_image\"\n            :label=\"getRow(itemName, titleField).full_name\"\n            size=\"sm\"\n          />\n        </div>\n        <div v-else-if=\"titleField === 'mobile_no'\">\n          <PhoneIcon class=\"h-4 w-4\" />\n        </div>\n        <div\n          v-if=\"\n            [\n              'modified',\n              'creation',\n              'first_response_time',\n              'first_responded_on',\n              'response_by',\n            ].includes(titleField)\n          \"\n          class=\"truncate text-base\"\n        >\n          <Tooltip :text=\"getRow(itemName, titleField).label\">\n            <div>{{ getRow(itemName, titleField).timeAgo }}</div>\n          </Tooltip>\n        </div>\n        <div v-else-if=\"titleField === 'sla_status'\" class=\"truncate text-base\">\n          <Badge\n            v-if=\"getRow(itemName, titleField).value\"\n            :variant=\"'subtle'\"\n            :theme=\"getRow(itemName, titleField).color\"\n            size=\"md\"\n            :label=\"getRow(itemName, titleField).value\"\n          />\n        </div>\n        <div\n          v-else-if=\"getRow(itemName, titleField).label\"\n          class=\"truncate text-base\"\n        >\n          {{ getRow(itemName, titleField).label }}\n        </div>\n        <div class=\"text-gray-500\" v-else>{{ __('No Title') }}</div>\n      </div>\n    </template>\n    <template #fields=\"{ fieldName, itemName }\">\n      <div\n        v-if=\"getRow(itemName, fieldName).label\"\n        class=\"truncate flex items-center gap-2\"\n      >\n        <div v-if=\"fieldName === 'status'\">\n          <IndicatorIcon :class=\"getRow(itemName, fieldName).color\" />\n        </div>\n        <div\n          v-else-if=\"\n            fieldName === 'organization' && getRow(itemName, fieldName).label\n          \"\n        >\n          <Avatar\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, fieldName).logo\"\n            :label=\"getRow(itemName, fieldName).label\"\n            size=\"xs\"\n          />\n        </div>\n        <div v-else-if=\"fieldName === 'lead_name'\">\n          <Avatar\n            v-if=\"getRow(itemName, fieldName).label\"\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, fieldName).image\"\n            :label=\"getRow(itemName, fieldName).image_label\"\n            size=\"xs\"\n          />\n        </div>\n        <div v-else-if=\"fieldName === 'lead_owner'\">\n          <Avatar\n            v-if=\"getRow(itemName, fieldName).full_name\"\n            class=\"flex items-center\"\n            :image=\"getRow(itemName, fieldName).user_image\"\n            :label=\"getRow(itemName, fieldName).full_name\"\n            size=\"xs\"\n          />\n        </div>\n        <div\n          v-if=\"\n            [\n              'modified',\n              'creation',\n              'first_response_time',\n              'first_responded_on',\n              'response_by',\n            ].includes(fieldName)\n          \"\n          class=\"truncate text-base\"\n        >\n          <Tooltip :text=\"getRow(itemName, fieldName).label\">\n            <div>{{ getRow(itemName, fieldName).timeAgo }}</div>\n          </Tooltip>\n        </div>\n        <div v-else-if=\"fieldName === 'sla_status'\" class=\"truncate text-base\">\n          <Badge\n            v-if=\"getRow(itemName, fieldName).value\"\n            :variant=\"'subtle'\"\n            :theme=\"getRow(itemName, fieldName).color\"\n            size=\"md\"\n            :label=\"getRow(itemName, fieldName).value\"\n          />\n        </div>\n        <div v-else-if=\"fieldName === '_assign'\" class=\"flex items-center\">\n          <MultipleAvatar\n            :avatars=\"getRow(itemName, fieldName).label\"\n            size=\"xs\"\n          />\n        </div>\n        <div v-else class=\"truncate text-base\">\n          {{ getRow(itemName, fieldName).label }}\n        </div>\n      </div>\n    </template>\n    <template #actions=\"{ itemName }\">\n      <div class=\"flex gap-2 items-center justify-between\">\n        <div class=\"text-gray-600 flex items-center gap-1.5\">\n          <EmailAtIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_email_count').label\">\n            {{ getRow(itemName, '_email_count').label }}\n          </span>\n          <span class=\"text-3xl leading-[0]\"> &middot; </span>\n          <NoteIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_note_count').label\">\n            {{ getRow(itemName, '_note_count').label }}\n          </span>\n          <span class=\"text-3xl leading-[0]\"> &middot; </span>\n          <TaskIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_task_count').label\">\n            {{ getRow(itemName, '_task_count').label }}\n          </span>\n          <span class=\"text-3xl leading-[0]\"> &middot; </span>\n          <CommentIcon class=\"h-4 w-4\" />\n          <span v-if=\"getRow(itemName, '_comment_count').label\">\n            {{ getRow(itemName, '_comment_count').label }}\n          </span>\n        </div>\n        <Dropdown\n          class=\"flex items-center gap-2\"\n          :options=\"actions(itemName)\"\n          variant=\"ghost\"\n          @click.stop.prevent\n        >\n          <Button icon=\"plus\" variant=\"ghost\" />\n        </Dropdown>\n      </div>\n    </template>\n  </KanbanView>\n  <LeadsListView\n    ref=\"leadsListView\"\n    v-else-if=\"leads.data && rows.length\"\n    v-model=\"leads.data.page_length_count\"\n    v-model:list=\"leads\"\n    :rows=\"rows\"\n    :columns=\"leads.data.columns\"\n    :options=\"{\n      showTooltip: false,\n      resizeColumn: true,\n      rowCount: leads.data.row_count,\n      totalCount: leads.data.total_count,\n    }\"\n    @loadMore=\"() => loadMore++\"\n    @columnWidthUpdated=\"() => triggerResize++\"\n    @updatePageCount=\"(count) => (updatedPageCount = count)\"\n    @applyFilter=\"(data) => viewControls.applyFilter(data)\"\n    @applyLikeFilter=\"(data) => viewControls.applyLikeFilter(data)\"\n    @likeDoc=\"(data) => viewControls.likeDoc(data)\"\n  />\n  <div v-else-if=\"leads.data\" class=\"flex h-full items-center justify-center\">\n    <div\n      class=\"flex flex-col items-center gap-3 text-xl font-medium text-gray-500\"\n    >\n      <LeadsIcon class=\"h-10 w-10\" />\n      <span>{{ __('No {0} Found', [__('Leads')]) }}</span>\n      <Button :label=\"__('Create')\" @click=\"showLeadModal = true\">\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </div>\n  </div>\n  <LeadModal\n    v-if=\"showLeadModal\"\n    v-model=\"showLeadModal\"\n    v-model:quickEntry=\"showQuickEntryModal\"\n    :defaults=\"defaults\"\n  />\n  <NoteModal\n    v-if=\"showNoteModal\"\n    v-model=\"showNoteModal\"\n    :note=\"note\"\n    doctype=\"CRM Lead\"\n    :doc=\"docname\"\n  />\n  <TaskModal\n    v-if=\"showTaskModal\"\n    v-model=\"showTaskModal\"\n    :task=\"task\"\n    doctype=\"CRM Lead\"\n    :doc=\"docname\"\n  />\n  <QuickEntryModal v-if=\"showQuickEntryModal\" v-model=\"showQuickEntryModal\" />\n</template>\n\n<script setup>\nimport MultipleAvatar from '@/components/MultipleAvatar.vue'\nimport CustomActions from '@/components/CustomActions.vue'\nimport EmailAtIcon from '@/components/Icons/EmailAtIcon.vue'\nimport PhoneIcon from '@/components/Icons/PhoneIcon.vue'\nimport NoteIcon from '@/components/Icons/NoteIcon.vue'\nimport TaskIcon from '@/components/Icons/TaskIcon.vue'\nimport CommentIcon from '@/components/Icons/CommentIcon.vue'\nimport IndicatorIcon from '@/components/Icons/IndicatorIcon.vue'\nimport LeadsIcon from '@/components/Icons/LeadsIcon.vue'\nimport LayoutHeader from '@/components/LayoutHeader.vue'\nimport LeadsListView from '@/components/ListViews/LeadsListView.vue'\nimport KanbanView from '@/components/Kanban/KanbanView.vue'\nimport LeadModal from '@/components/Modals/LeadModal.vue'\nimport NoteModal from '@/components/Modals/NoteModal.vue'\nimport TaskModal from '@/components/Modals/TaskModal.vue'\nimport QuickEntryModal from '@/components/Settings/QuickEntryModal.vue'\nimport ViewControls from '@/components/ViewControls.vue'\nimport { globalStore } from '@/stores/global'\nimport { usersStore } from '@/stores/users'\nimport { organizationsStore } from '@/stores/organizations'\nimport { statusesStore } from '@/stores/statuses'\nimport { callEnabled } from '@/composables/settings'\nimport { dateFormat, dateTooltipFormat, timeAgo, formatTime } from '@/utils'\nimport { Breadcrumbs, Avatar, Tooltip, Dropdown } from 'frappe-ui'\nimport { useRoute } from 'vue-router'\nimport { ref, computed, reactive, h } from 'vue'\n\nconst breadcrumbs = [{ label: __('Leads'), route: { name: 'Leads' } }]\n\nconst { makeCall } = globalStore()\nconst { getUser } = usersStore()\nconst { getOrganization } = organizationsStore()\nconst { getLeadStatus } = statusesStore()\n\nconst route = useRoute()\n\nconst leadsListView = ref(null)\nconst showLeadModal = ref(false)\nconst showQuickEntryModal = ref(false)\n\nconst defaults = reactive({})\n\n// leads data is loaded in the ViewControls component\nconst leads = ref({})\nconst loadMore = ref(1)\nconst triggerResize = ref(1)\nconst updatedPageCount = ref(20)\nconst viewControls = ref(null)\n\nfunction getRow(name, field) {\n  function getValue(value) {\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      return value\n    }\n    return { label: value }\n  }\n  return getValue(rows.value?.find((row) => row.name == name)[field])\n}\n\n// Rows\nconst rows = computed(() => {\n  if (!leads.value?.data?.data) return []\n  if (leads.value.data.view_type === 'group_by') {\n    if (!leads.value?.data.group_by_field?.name) return []\n    return getGroupedByRows(\n      leads.value?.data.data,\n      leads.value?.data.group_by_field,\n    )\n  } else if (leads.value.data.view_type === 'kanban') {\n    return getKanbanRows(leads.value.data.data)\n  } else {\n    return parseRows(leads.value?.data.data)\n  }\n})\n\nfunction getGroupedByRows(listRows, groupByField) {\n  let groupedRows = []\n\n  groupByField.options?.forEach((option) => {\n    let filteredRows = []\n\n    if (!option) {\n      filteredRows = listRows.filter((row) => !row[groupByField.name])\n    } else {\n      filteredRows = listRows.filter((row) => row[groupByField.name] == option)\n    }\n\n    let groupDetail = {\n      label: groupByField.label,\n      group: option || __(' '),\n      collapsed: false,\n      rows: parseRows(filteredRows),\n    }\n    if (groupByField.name == 'status') {\n      groupDetail.icon = () =>\n        h(IndicatorIcon, {\n          class: getLeadStatus(option)?.iconColorClass,\n        })\n    }\n    groupedRows.push(groupDetail)\n  })\n\n  return groupedRows || listRows\n}\n\nfunction getKanbanRows(data) {\n  let _rows = []\n  data.forEach((column) => {\n    column.data?.forEach((row) => {\n      _rows.push(row)\n    })\n  })\n  return parseRows(_rows)\n}\n\nfunction parseRows(rows) {\n  return rows.map((lead) => {\n    let _rows = {}\n    leads.value?.data.rows.forEach((row) => {\n      _rows[row] = lead[row]\n\n      if (row == 'lead_name') {\n        _rows[row] = {\n          label: lead.lead_name,\n          image: lead.image,\n          image_label: lead.first_name,\n        }\n      } else if (row == 'organization') {\n        _rows[row] = {\n          label: lead.organization,\n          logo: getOrganization(lead.organization)?.organization_logo,\n        }\n      } else if (row == 'status') {\n        _rows[row] = {\n          label: lead.status,\n          color: getLeadStatus(lead.status)?.iconColorClass,\n        }\n      } else if (row == 'sla_status') {\n        let value = lead.sla_status\n        let tooltipText = value\n        let color =\n          lead.sla_status == 'Failed'\n            ? 'red'\n            : lead.sla_status == 'Fulfilled'\n              ? 'green'\n              : 'orange'\n        if (value == 'First Response Due') {\n          value = __(timeAgo(lead.response_by))\n          tooltipText = dateFormat(lead.response_by, dateTooltipFormat)\n          if (new Date(lead.response_by) < new Date()) {\n            color = 'red'\n          }\n        }\n        _rows[row] = {\n          label: tooltipText,\n          value: value,\n          color: color,\n        }\n      } else if (row == 'lead_owner') {\n        _rows[row] = {\n          label: lead.lead_owner && getUser(lead.lead_owner).full_name,\n          ...(lead.lead_owner && getUser(lead.lead_owner)),\n        }\n      } else if (row == '_assign') {\n        let assignees = JSON.parse(lead._assign) || []\n        if (!assignees.length && lead.lead_owner) {\n          assignees = [lead.lead_owner]\n        }\n        _rows[row] = assignees.map((user) => ({\n          name: user,\n          image: getUser(user).user_image,\n          label: getUser(user).full_name,\n        }))\n      } else if (['modified', 'creation'].includes(row)) {\n        _rows[row] = {\n          label: dateFormat(lead[row], dateTooltipFormat),\n          timeAgo: __(timeAgo(lead[row])),\n        }\n      } else if (\n        ['first_response_time', 'first_responded_on', 'response_by'].includes(\n          row,\n        )\n      ) {\n        let field = row == 'response_by' ? 'response_by' : 'first_responded_on'\n        _rows[row] = {\n          label: lead[field] ? dateFormat(lead[field], dateTooltipFormat) : '',\n          timeAgo: lead[row]\n            ? row == 'first_response_time'\n              ? formatTime(lead[row])\n              : __(timeAgo(lead[row]))\n            : '',\n        }\n      }\n    })\n    _rows['_email_count'] = lead._email_count\n    _rows['_note_count'] = lead._note_count\n    _rows['_task_count'] = lead._task_count\n    _rows['_comment_count'] = lead._comment_count\n    return _rows\n  })\n}\n\nfunction onNewClick(column) {\n  let column_field = leads.value.params.column_field\n\n  if (column_field) {\n    defaults[column_field] = column.column.name\n  }\n\n  showLeadModal.value = true\n}\n\nfunction actions(itemName) {\n  let mobile_no = getRow(itemName, 'mobile_no')?.label || ''\n  let actions = [\n    {\n      icon: h(PhoneIcon, { class: 'h-4 w-4' }),\n      label: __('Make a Call'),\n      onClick: () => makeCall(mobile_no),\n      condition: () => mobile_no && callEnabled.value,\n    },\n    {\n      icon: h(NoteIcon, { class: 'h-4 w-4' }),\n      label: __('New Note'),\n      onClick: () => showNote(itemName),\n    },\n    {\n      icon: h(TaskIcon, { class: 'h-4 w-4' }),\n      label: __('New Task'),\n      onClick: () => showTask(itemName),\n    },\n  ]\n  return actions.filter((action) =>\n    action.condition ? action.condition() : true,\n  )\n}\n\nconst docname = ref('')\nconst showNoteModal = ref(false)\nconst note = ref({\n  title: '',\n  content: '',\n})\n\nfunction showNote(name) {\n  docname.value = name\n  showNoteModal.value = true\n}\n\nconst showTaskModal = ref(false)\nconst task = ref({\n  title: '',\n  description: '',\n  assigned_to: '',\n  due_date: '',\n  priority: 'Low',\n  status: 'Backlog',\n})\n\nfunction showTask(name) {\n  docname.value = name\n  showTaskModal.value = true\n}\n</script>\n"],"names":["emit","__emit","pageLengthCount","_useModel","__props","list","isLikeFilterApplied","computed","_b","_a","user","sessionStore","isLiked","item","watch","val","old_value","listBulkActionsRef","ref","__expose","props","getUser","isManager","usersStore","getLeadStatus","statusOptions","statusesStore","show","router","useRouter","error","isLeadCreating","sections","createResource","data","section","field","leadStatuses","lead","reactive","createLead","values","statuses","createNewLead","err","showQuickEntryModal","openQuickEntryModal","nextTick","onMounted","breadcrumbs","makeCall","globalStore","getOrganization","organizationsStore","route","useRoute","leadsListView","showLeadModal","defaults","leads","loadMore","triggerResize","updatedPageCount","viewControls","getRow","name","getValue","value","rows","row","_d","_c","getGroupedByRows","_e","_f","getKanbanRows","parseRows","_g","listRows","groupByField","groupedRows","option","filteredRows","groupDetail","h","IndicatorIcon","_rows","column","tooltipText","color","timeAgo","dateFormat","dateTooltipFormat","assignees","formatTime","onNewClick","column_field","actions","itemName","mobile_no","PhoneIcon","callEnabled","NoteIcon","showNote","TaskIcon","showTask","action","docname","showNoteModal","note","showTaskModal","task"],"mappings":"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"}