import { type DateValue } from '@internationalized/date';
import { type Ref } from 'vue';
import { type Grid, type Matcher, type WeekDayFormat } from '../shared/date';
export type UseCalendarProps = {
    locale: Ref<string>;
    placeholder: Ref<DateValue>;
    weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    fixedWeeks: boolean;
    numberOfMonths: number;
    minValue: Ref<DateValue | undefined>;
    maxValue: Ref<DateValue | undefined>;
    disabled: Ref<boolean>;
    weekdayFormat: WeekDayFormat;
    pagedNavigation: boolean;
    isDateDisabled?: Matcher;
    isDateUnavailable?: Matcher;
    calendarLabel?: string;
};
export type UseCalendarStateProps = {
    isDateDisabled: Matcher;
    isDateUnavailable: Matcher;
    date: Ref<DateValue | DateValue[] | undefined>;
};
export declare function useCalendarState(props: UseCalendarStateProps): {
    isDateSelected: (dateObj: DateValue) => boolean;
    isInvalid: import("vue").ComputedRef<boolean>;
};
export declare function useCalendar(props: UseCalendarProps): {
    isDateDisabled: (dateObj: DateValue) => boolean;
    isDateUnavailable: (date: DateValue) => boolean;
    isNextButtonDisabled: import("vue").ComputedRef<boolean>;
    isPrevButtonDisabled: import("vue").ComputedRef<boolean>;
    grid: Ref<Grid<DateValue>[]>;
    weekdays: import("vue").ComputedRef<string[]>;
    visibleView: import("vue").ComputedRef<DateValue[]>;
    isOutsideVisibleView: (date: DateValue) => boolean;
    formatter: import('../shared').Formatter;
    nextPage: () => void;
    prevPage: () => void;
    headingValue: import("vue").ComputedRef<string>;
    fullCalendarLabel: import("vue").ComputedRef<string>;
};
